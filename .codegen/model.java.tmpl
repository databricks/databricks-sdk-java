// Code generated from OpenAPI specs by Databricks SDK Generator. DO NOT EDIT.

package com.databricks.sdk.service.{{.Package.Name}};

import java.util.Map;

import com.databricks.sdk.annotation.QueryParam;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.util.Collection;
import java.util.Objects;
import com.databricks.sdk.mixin.ToStringer;


{{if .Description}}/**
 {{.Comment " * " 80}}
 */{{end}}
{{if .Fields -}}
public class {{.PascalName}} {
  {{- range .Fields}}
  /**
   {{.Comment "   * " 80}}
   */
  {{if .IsJson}}@JsonProperty("{{.Name}}"){{end}}{{if .IsQuery}}@QueryParam("{{.Name}}"){{end}}
  private {{template "type" .Entity }} {{.CamelName}}{{if .IsNameReserved}}Value{{end}};
  {{end}}

  {{- range .Fields}}
  public {{template "type" .Of}} set{{.PascalName}}({{template "type" .Entity }} {{.CamelName}}{{if .IsNameReserved}}Value{{end}}) {
    this.{{.CamelName}}{{if .IsNameReserved}}Value{{end}} = {{.CamelName}}{{if .IsNameReserved}}Value{{end}};
    return this;
  }

  public {{template "type" .Entity }} get{{.PascalName}}() {
    return {{.CamelName}}{{if .IsNameReserved}}Value{{end}};
  }
  {{end}}

  @Override
  public boolean equals(Object o) {
    if (this == o) return true;
    if (o == null || getClass() != o.getClass()) return false;
    {{.PascalName}} that = ({{.PascalName}}) o;
    return {{range $i, $x := .Fields}}{{if $i}}&& {{end}}Objects.equals({{.CamelName}}{{if .IsNameReserved}}Value{{end}}, that.{{.CamelName}}{{if .IsNameReserved}}Value{{end}})
    {{end}};
  }

  @Override
  public int hashCode() {
    return Objects.hash({{range $i, $x := .Fields}}{{if $i}}, {{end}}{{.CamelName}}{{if .IsNameReserved}}Value{{end}}{{end}});
  }

  @Override
  public String toString() {
    return new ToStringer({{.PascalName}}.class){{range .Fields}}
      .add("{{.CamelName}}{{if .IsNameReserved}}Value{{end}}", {{.CamelName}}{{if .IsNameReserved}}Value{{end}})
    {{- end}}.toString();
  }
}
{{else if .ArrayValue}}// type {{.PascalName}} []{{template "type" .ArrayValue}}
{{else if .MapValue}}// type {{.PascalName}} {{template "type" .}}
{{else if .Enum}}public enum {{.PascalName}}{
  {{range .Enum }}{{.Content}},{{.Comment "// " 80}}
  {{end}}
}{{end}}

{{- define "type" -}}
	{{- if not . }}Object /* ERROR */
	{{- else if .IsString}}String
	{{- else if .IsBool}}Boolean
	{{- else if .IsInt64}}Long
	{{- else if .IsFloat64}}Float
	{{- else if .IsInt}}Long
	{{- else if .ArrayValue }}Collection<{{template "type" .ArrayValue}}>
	{{- else if .MapValue }}Map<String,{{template "type" .MapValue}}>
	{{- else if .IsObject }}{{.PascalName}}
	{{- else if .Enum }}{{.PascalName}}
	{{- else}}Object /* MISSING TYPE */
	{{- end -}}
{{- end -}}