// Code generated from OpenAPI specs by Databricks SDK Generator. DO NOT EDIT.

package com.databricks.sdk;

import com.databricks.sdk.client.ApiClient;
import com.databricks.sdk.client.ConfigLoader;
import com.databricks.sdk.client.DatabricksConfig;
{{- /* The mapping of mixin replacements should be defined in the .codegen.json file somehow, so that it can be used
       in multiple pipelines in the template itself. Pipelines in go template are not able to reference variables
       defined in an outer scope (https://github.com/golang/go/issues/17454). */ -}}
import com.databricks.sdk.mixin.ClustersExt;
import com.databricks.sdk.mixin.DbfsExt;
{{range .Services}}{{if not .IsAccounts}}
import com.databricks.sdk.service.{{.Package.Name}}.{{.PascalName}}API;
import com.databricks.sdk.service.{{.Package.Name}}.{{.PascalName}}Service;
{{end}}{{end}}
import com.databricks.sdk.support.Generated;

{{- define "api" -}}
  {{- $mixins := dict "ClustersAPI" "ClustersExt" "DbfsAPI" "DbfsExt" -}}
  {{- $genApi := concat .PascalName "API" -}}
  {{- getOrDefault $mixins $genApi $genApi -}}
{{- end -}}

/**
 * Entry point for accessing Databricks workspace-level APIs
 */
@Generated
public class WorkspaceClient {
  private final ApiClient apiClient;
  private final DatabricksConfig config;
  {{range .Services}}{{if not .IsAccounts}}
  private {{template "api" .}} {{.CamelName}}API;{{end}}{{end}}

  public WorkspaceClient() {
    this(ConfigLoader.getDefault());
  }

  public WorkspaceClient(DatabricksConfig config) {
    this.config = config;
    apiClient = new ApiClient(config);
    {{range .Services}}{{if not .IsAccounts}}
    {{.CamelName}}API = new {{template "api" .}}(apiClient);{{end}}{{end}}
  }

  /** Constructor for mocks */
  public WorkspaceClient(boolean mock) {
    apiClient = null;
    config = null;
  }
  {{range .Services}}{{if not .IsAccounts}}
  {{if .Description}}/**
   {{.Comment "   * " 80}}
   */{{end}}
  public {{template "api" .}} {{.CamelName}}() {
    return {{.CamelName}}API;
  }
  {{end}}{{end}}
  {{range .Services}}{{if not .IsAccounts}}
  /** Replace {{.PascalName}}API implementation with mock */
  public WorkspaceClient with{{.PascalName}}Impl({{.PascalName}}Service {{.CamelName}}) {
    {{.CamelName}}API = new {{template "api" .}}({{.CamelName}});
    return this;
  }
  {{end}}{{end}}
  public ApiClient apiClient() {
    return apiClient;
  }

  public DatabricksConfig config() {
    return config;
  }
}
