// Code generated from OpenAPI specs by Databricks SDK Generator. DO NOT EDIT.
package com.databricks.sdk.service.{{.Package.Name}};

import java.io.IOException;
import java.util.Collection;
import java.util.Map;
import java.util.HashMap;

import com.databricks.sdk.core.ApiClient;
import com.databricks.sdk.core.DatabricksException;
import com.databricks.sdk.support.Generated;

{{range .Package.ImportedEntities}}
import com.databricks.sdk.service.{{.Package.Name}}.{{.PascalName}};{{end}}

/** Package-local implementation of {{.PascalName}} */
@Generated
class {{.PascalName}}Impl implements {{.PascalName}}Service {
  private final ApiClient apiClient;

  public {{.PascalName}}Impl(ApiClient apiClient) {
    this.apiClient = apiClient;
  }
	{{range .Methods}}
  @Override
  public {{if .Response -}}{{template "type" .Response}}{{else}}void{{end}} {{.CamelName}}{{if .IsNameReserved}}Content{{end}}({{if .Request}}{{template "type" .Request}} request{{end}}) {
    String path = {{if .PathParts -}}
      String.format("{{range  .PathParts}}{{.Prefix}}{{if or .Field .IsAccountId}}%s{{end}}{{ end }}"{{ range .PathParts }}{{if .Field}}, request.get{{.Field.PascalName}}(){{ else if .IsAccountId }}, apiClient.configuredAccountID(){{end}}{{ end }})
    {{- else}}"{{.Path}}"{{end}};
    {{ template "headers" . }}
    {{if .Response -}}
      {{- if .Response.ArrayValue -}} return apiClient.getCollection(path, null, {{template "type" .Response.ArrayValue}}.class, headers);
      {{- else if .Response.MapValue -}} return apiClient.getStringMap(path, request, headers);
      {{- else -}} return apiClient.{{.Verb}}(path{{if .Request}}, request{{end}}{{if .Response -}}, {{if .Response.ArrayValue }}Collection
                        {{- else if .Response.MapValue }}Map
                        {{- else}}{{template "type" .Response}}
                        {{- end -}}{{else}}, Void{{end}}.class, headers);{{end}}
    {{- else -}}apiClient.{{.Verb}}(path{{if .Request}}, request{{end}}{{if .Response -}}, {{if .Response.ArrayValue }}Collection
      {{- else if .Response.MapValue }}Map
      {{- else}}{{template "type" .Response}}
      {{- end -}}{{else}}, Void{{end}}.class, headers);
    {{end}}
  }
  {{end}}
}

{{ define "headers" -}}
    Map<String, String> headers = new HashMap<>();
    {{- range $key, $value := .FixedRequestHeaders }}
    headers.put("{{$key}}", "{{$value}}");
    {{- end -}}
{{- end }}
