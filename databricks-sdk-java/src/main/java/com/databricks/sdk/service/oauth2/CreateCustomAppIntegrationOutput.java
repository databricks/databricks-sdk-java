// Code generated from OpenAPI specs by Databricks SDK Generator. DO NOT EDIT.

package com.databricks.sdk.service.oauth2;

import com.databricks.sdk.support.Generated;
import com.databricks.sdk.support.ToStringer;
import com.fasterxml.jackson.core.JsonGenerator;
import com.fasterxml.jackson.core.JsonParser;
import com.fasterxml.jackson.databind.DeserializationContext;
import com.fasterxml.jackson.databind.JsonDeserializer;
import com.fasterxml.jackson.databind.JsonSerializer;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.SerializerProvider;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import java.io.IOException;
import java.util.Objects;

@Generated
@JsonSerialize(
    using = CreateCustomAppIntegrationOutput.CreateCustomAppIntegrationOutputSerializer.class)
@JsonDeserialize(
    using = CreateCustomAppIntegrationOutput.CreateCustomAppIntegrationOutputDeserializer.class)
public class CreateCustomAppIntegrationOutput {
  /** OAuth client-id generated by the Databricks */
  private String clientId;

  /**
   * OAuth client-secret generated by the Databricks. If this is a confidential OAuth app
   * client-secret will be generated.
   */
  private String clientSecret;

  /** Unique integration id for the custom OAuth app */
  private String integrationId;

  public CreateCustomAppIntegrationOutput setClientId(String clientId) {
    this.clientId = clientId;
    return this;
  }

  public String getClientId() {
    return clientId;
  }

  public CreateCustomAppIntegrationOutput setClientSecret(String clientSecret) {
    this.clientSecret = clientSecret;
    return this;
  }

  public String getClientSecret() {
    return clientSecret;
  }

  public CreateCustomAppIntegrationOutput setIntegrationId(String integrationId) {
    this.integrationId = integrationId;
    return this;
  }

  public String getIntegrationId() {
    return integrationId;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) return true;
    if (o == null || getClass() != o.getClass()) return false;
    CreateCustomAppIntegrationOutput that = (CreateCustomAppIntegrationOutput) o;
    return Objects.equals(clientId, that.clientId)
        && Objects.equals(clientSecret, that.clientSecret)
        && Objects.equals(integrationId, that.integrationId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(clientId, clientSecret, integrationId);
  }

  @Override
  public String toString() {
    return new ToStringer(CreateCustomAppIntegrationOutput.class)
        .add("clientId", clientId)
        .add("clientSecret", clientSecret)
        .add("integrationId", integrationId)
        .toString();
  }

  CreateCustomAppIntegrationOutputPb toPb() {
    CreateCustomAppIntegrationOutputPb pb = new CreateCustomAppIntegrationOutputPb();
    pb.setClientId(clientId);
    pb.setClientSecret(clientSecret);
    pb.setIntegrationId(integrationId);

    return pb;
  }

  static CreateCustomAppIntegrationOutput fromPb(CreateCustomAppIntegrationOutputPb pb) {
    CreateCustomAppIntegrationOutput model = new CreateCustomAppIntegrationOutput();
    model.setClientId(pb.getClientId());
    model.setClientSecret(pb.getClientSecret());
    model.setIntegrationId(pb.getIntegrationId());

    return model;
  }

  public static class CreateCustomAppIntegrationOutputSerializer
      extends JsonSerializer<CreateCustomAppIntegrationOutput> {
    @Override
    public void serialize(
        CreateCustomAppIntegrationOutput value, JsonGenerator gen, SerializerProvider provider)
        throws IOException {
      CreateCustomAppIntegrationOutputPb pb = value.toPb();
      provider.defaultSerializeValue(pb, gen);
    }
  }

  public static class CreateCustomAppIntegrationOutputDeserializer
      extends JsonDeserializer<CreateCustomAppIntegrationOutput> {
    @Override
    public CreateCustomAppIntegrationOutput deserialize(JsonParser p, DeserializationContext ctxt)
        throws IOException {
      // The Codec is set by us in the SerDeUtils.java, and it is an ObjectMapper.
      ObjectMapper mapper = (ObjectMapper) p.getCodec();
      CreateCustomAppIntegrationOutputPb pb =
          mapper.readValue(p, CreateCustomAppIntegrationOutputPb.class);
      return CreateCustomAppIntegrationOutput.fromPb(pb);
    }
  }
}
