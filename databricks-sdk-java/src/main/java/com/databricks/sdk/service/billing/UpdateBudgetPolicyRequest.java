// Code generated from OpenAPI specs by Databricks SDK Generator. DO NOT EDIT.

package com.databricks.sdk.service.billing;

import com.databricks.sdk.support.Generated;
import com.databricks.sdk.support.ToStringer;
import com.fasterxml.jackson.core.JsonGenerator;
import com.fasterxml.jackson.core.JsonParser;
import com.fasterxml.jackson.databind.DeserializationContext;
import com.fasterxml.jackson.databind.JsonDeserializer;
import com.fasterxml.jackson.databind.JsonSerializer;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.SerializerProvider;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import java.io.IOException;
import java.util.Objects;

/** Update a budget policy */
@Generated
@JsonSerialize(using = UpdateBudgetPolicyRequest.UpdateBudgetPolicyRequestSerializer.class)
@JsonDeserialize(using = UpdateBudgetPolicyRequest.UpdateBudgetPolicyRequestDeserializer.class)
public class UpdateBudgetPolicyRequest {
  /** DEPRECATED. This is redundant field as LimitConfig is part of the BudgetPolicy */
  private LimitConfig limitConfig;

  /** Contains the BudgetPolicy details. */
  private BudgetPolicy policy;

  /** The Id of the policy. This field is generated by Databricks and globally unique. */
  private String policyId;

  public UpdateBudgetPolicyRequest setLimitConfig(LimitConfig limitConfig) {
    this.limitConfig = limitConfig;
    return this;
  }

  public LimitConfig getLimitConfig() {
    return limitConfig;
  }

  public UpdateBudgetPolicyRequest setPolicy(BudgetPolicy policy) {
    this.policy = policy;
    return this;
  }

  public BudgetPolicy getPolicy() {
    return policy;
  }

  public UpdateBudgetPolicyRequest setPolicyId(String policyId) {
    this.policyId = policyId;
    return this;
  }

  public String getPolicyId() {
    return policyId;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) return true;
    if (o == null || getClass() != o.getClass()) return false;
    UpdateBudgetPolicyRequest that = (UpdateBudgetPolicyRequest) o;
    return Objects.equals(limitConfig, that.limitConfig)
        && Objects.equals(policy, that.policy)
        && Objects.equals(policyId, that.policyId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(limitConfig, policy, policyId);
  }

  @Override
  public String toString() {
    return new ToStringer(UpdateBudgetPolicyRequest.class)
        .add("limitConfig", limitConfig)
        .add("policy", policy)
        .add("policyId", policyId)
        .toString();
  }

  UpdateBudgetPolicyRequestPb toPb() {
    UpdateBudgetPolicyRequestPb pb = new UpdateBudgetPolicyRequestPb();
    pb.setLimitConfig(limitConfig);
    pb.setPolicy(policy);
    pb.setPolicyId(policyId);

    return pb;
  }

  static UpdateBudgetPolicyRequest fromPb(UpdateBudgetPolicyRequestPb pb) {
    UpdateBudgetPolicyRequest model = new UpdateBudgetPolicyRequest();
    model.setLimitConfig(pb.getLimitConfig());
    model.setPolicy(pb.getPolicy());
    model.setPolicyId(pb.getPolicyId());

    return model;
  }

  public static class UpdateBudgetPolicyRequestSerializer
      extends JsonSerializer<UpdateBudgetPolicyRequest> {
    @Override
    public void serialize(
        UpdateBudgetPolicyRequest value, JsonGenerator gen, SerializerProvider provider)
        throws IOException {
      UpdateBudgetPolicyRequestPb pb = value.toPb();
      provider.defaultSerializeValue(pb, gen);
    }
  }

  public static class UpdateBudgetPolicyRequestDeserializer
      extends JsonDeserializer<UpdateBudgetPolicyRequest> {
    @Override
    public UpdateBudgetPolicyRequest deserialize(JsonParser p, DeserializationContext ctxt)
        throws IOException {
      ObjectMapper mapper = (ObjectMapper) p.getCodec();
      UpdateBudgetPolicyRequestPb pb = mapper.readValue(p, UpdateBudgetPolicyRequestPb.class);
      return UpdateBudgetPolicyRequest.fromPb(pb);
    }
  }
}
