// Code generated from OpenAPI specs by Databricks SDK Generator. DO NOT EDIT.

package com.databricks.sdk.service.ml;

import com.databricks.sdk.support.Generated;
import com.databricks.sdk.support.ToStringer;
import com.fasterxml.jackson.core.JsonGenerator;
import com.fasterxml.jackson.core.JsonParser;
import com.fasterxml.jackson.databind.DeserializationContext;
import com.fasterxml.jackson.databind.JsonDeserializer;
import com.fasterxml.jackson.databind.JsonSerializer;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.SerializerProvider;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import java.io.IOException;
import java.util.Collection;
import java.util.Objects;

@Generated
@JsonSerialize(using = ModelVersion.ModelVersionSerializer.class)
@JsonDeserialize(using = ModelVersion.ModelVersionDeserializer.class)
public class ModelVersion {
  /** Timestamp recorded when this `model_version` was created. */
  private Long creationTimestamp;

  /** Current stage for this `model_version`. */
  private String currentStage;

  /** Description of this `model_version`. */
  private String description;

  /** Timestamp recorded when metadata for this `model_version` was last updated. */
  private Long lastUpdatedTimestamp;

  /** Unique name of the model */
  private String name;

  /**
   * MLflow run ID used when creating `model_version`, if `source` was generated by an experiment
   * run stored in MLflow tracking server.
   */
  private String runId;

  /** Run Link: Direct link to the run that generated this version */
  private String runLink;

  /**
   * URI indicating the location of the source model artifacts, used when creating `model_version`
   */
  private String source;

  /** Current status of `model_version` */
  private ModelVersionStatus status;

  /** Details on current `status`, if it is pending or failed. */
  private String statusMessage;

  /** Tags: Additional metadata key-value pairs for this `model_version`. */
  private Collection<ModelVersionTag> tags;

  /** User that created this `model_version`. */
  private String userId;

  /** Model's version number. */
  private String version;

  public ModelVersion setCreationTimestamp(Long creationTimestamp) {
    this.creationTimestamp = creationTimestamp;
    return this;
  }

  public Long getCreationTimestamp() {
    return creationTimestamp;
  }

  public ModelVersion setCurrentStage(String currentStage) {
    this.currentStage = currentStage;
    return this;
  }

  public String getCurrentStage() {
    return currentStage;
  }

  public ModelVersion setDescription(String description) {
    this.description = description;
    return this;
  }

  public String getDescription() {
    return description;
  }

  public ModelVersion setLastUpdatedTimestamp(Long lastUpdatedTimestamp) {
    this.lastUpdatedTimestamp = lastUpdatedTimestamp;
    return this;
  }

  public Long getLastUpdatedTimestamp() {
    return lastUpdatedTimestamp;
  }

  public ModelVersion setName(String name) {
    this.name = name;
    return this;
  }

  public String getName() {
    return name;
  }

  public ModelVersion setRunId(String runId) {
    this.runId = runId;
    return this;
  }

  public String getRunId() {
    return runId;
  }

  public ModelVersion setRunLink(String runLink) {
    this.runLink = runLink;
    return this;
  }

  public String getRunLink() {
    return runLink;
  }

  public ModelVersion setSource(String source) {
    this.source = source;
    return this;
  }

  public String getSource() {
    return source;
  }

  public ModelVersion setStatus(ModelVersionStatus status) {
    this.status = status;
    return this;
  }

  public ModelVersionStatus getStatus() {
    return status;
  }

  public ModelVersion setStatusMessage(String statusMessage) {
    this.statusMessage = statusMessage;
    return this;
  }

  public String getStatusMessage() {
    return statusMessage;
  }

  public ModelVersion setTags(Collection<ModelVersionTag> tags) {
    this.tags = tags;
    return this;
  }

  public Collection<ModelVersionTag> getTags() {
    return tags;
  }

  public ModelVersion setUserId(String userId) {
    this.userId = userId;
    return this;
  }

  public String getUserId() {
    return userId;
  }

  public ModelVersion setVersion(String version) {
    this.version = version;
    return this;
  }

  public String getVersion() {
    return version;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) return true;
    if (o == null || getClass() != o.getClass()) return false;
    ModelVersion that = (ModelVersion) o;
    return Objects.equals(creationTimestamp, that.creationTimestamp)
        && Objects.equals(currentStage, that.currentStage)
        && Objects.equals(description, that.description)
        && Objects.equals(lastUpdatedTimestamp, that.lastUpdatedTimestamp)
        && Objects.equals(name, that.name)
        && Objects.equals(runId, that.runId)
        && Objects.equals(runLink, that.runLink)
        && Objects.equals(source, that.source)
        && Objects.equals(status, that.status)
        && Objects.equals(statusMessage, that.statusMessage)
        && Objects.equals(tags, that.tags)
        && Objects.equals(userId, that.userId)
        && Objects.equals(version, that.version);
  }

  @Override
  public int hashCode() {
    return Objects.hash(
        creationTimestamp,
        currentStage,
        description,
        lastUpdatedTimestamp,
        name,
        runId,
        runLink,
        source,
        status,
        statusMessage,
        tags,
        userId,
        version);
  }

  @Override
  public String toString() {
    return new ToStringer(ModelVersion.class)
        .add("creationTimestamp", creationTimestamp)
        .add("currentStage", currentStage)
        .add("description", description)
        .add("lastUpdatedTimestamp", lastUpdatedTimestamp)
        .add("name", name)
        .add("runId", runId)
        .add("runLink", runLink)
        .add("source", source)
        .add("status", status)
        .add("statusMessage", statusMessage)
        .add("tags", tags)
        .add("userId", userId)
        .add("version", version)
        .toString();
  }

  ModelVersionPb toPb() {
    ModelVersionPb pb = new ModelVersionPb();
    pb.setCreationTimestamp(creationTimestamp);
    pb.setCurrentStage(currentStage);
    pb.setDescription(description);
    pb.setLastUpdatedTimestamp(lastUpdatedTimestamp);
    pb.setName(name);
    pb.setRunId(runId);
    pb.setRunLink(runLink);
    pb.setSource(source);
    pb.setStatus(status);
    pb.setStatusMessage(statusMessage);
    pb.setTags(tags);
    pb.setUserId(userId);
    pb.setVersion(version);

    return pb;
  }

  static ModelVersion fromPb(ModelVersionPb pb) {
    ModelVersion model = new ModelVersion();
    model.setCreationTimestamp(pb.getCreationTimestamp());
    model.setCurrentStage(pb.getCurrentStage());
    model.setDescription(pb.getDescription());
    model.setLastUpdatedTimestamp(pb.getLastUpdatedTimestamp());
    model.setName(pb.getName());
    model.setRunId(pb.getRunId());
    model.setRunLink(pb.getRunLink());
    model.setSource(pb.getSource());
    model.setStatus(pb.getStatus());
    model.setStatusMessage(pb.getStatusMessage());
    model.setTags(pb.getTags());
    model.setUserId(pb.getUserId());
    model.setVersion(pb.getVersion());

    return model;
  }

  public static class ModelVersionSerializer extends JsonSerializer<ModelVersion> {
    @Override
    public void serialize(ModelVersion value, JsonGenerator gen, SerializerProvider provider)
        throws IOException {
      ModelVersionPb pb = value.toPb();
      provider.defaultSerializeValue(pb, gen);
    }
  }

  public static class ModelVersionDeserializer extends JsonDeserializer<ModelVersion> {
    @Override
    public ModelVersion deserialize(JsonParser p, DeserializationContext ctxt) throws IOException {
      ObjectMapper mapper = (ObjectMapper) p.getCodec();
      ModelVersionPb pb = mapper.readValue(p, ModelVersionPb.class);
      return ModelVersion.fromPb(pb);
    }
  }
}
