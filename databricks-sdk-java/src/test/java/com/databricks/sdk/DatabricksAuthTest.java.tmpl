// These are auto-generated tests for Unified Authentication
// In case of editing this file, make sure the change is propagated to all Databricks SDK codebases

package com.databricks.sdk;

import static org.junit.jupiter.api.Assertions.*;
import com.databricks.sdk.core.ConfigResolving;
import com.databricks.sdk.core.DatabricksConfig;
import com.databricks.sdk.core.utils.GitHubUtils;
import com.databricks.sdk.core.utils.TestOSUtils;
import java.io.File;
import org.junit.jupiter.api.Test;
import java.net.URL;
import java.util.HashMap;
import java.util.Map;
import java.util.function.Supplier;


public class DatabricksAuthTest implements TestOSUtils, GitHubUtils, ConfigResolving {

    private static String prefixPath;

    public DatabricksAuthTest() {
      setPermissionOnTestAz();
      prefixPath = System.getProperty("user.dir") + getTestDir();
    }

    {{range .}}
    @Test
    public void test{{.PascalName}}() {
        {{with .Env}}// Set environment variables
        StaticEnv env = new StaticEnv(){{range $k,$v := .}}
          .with("{{$k}}", {{if eq $k "HOME"}}resource("/{{$v}}"){{else}}"{{$v}}"{{end}}){{end}};{{end}}
        {{- with .AssertError}}
        raises("{{.}}", () -> { {{end}}
          DatabricksConfig config = new DatabricksConfig(){{range .Fields}}
            .set{{.PascalName}}("{{.Value}}"){{end}}{{with .Env}}{{end}};
          {{with .Env}}resolveConfig(config, env);{{end}}
          config.authenticate();
          {{with .AssertAuth}}
          assertEquals("{{.}}", config.getAuthType());{{end}}{{with .AssertHost}}
          assertEquals("{{.}}", config.getHost());{{end}}{{if .AssertAzure}}
          assertTrue(config.isAzure());{{end}}
        {{- with .AssertError}}
        });{{end}}
    }
    {{end}}

    private String resource(String file) {
      URL resource = getClass().getResource(file);
      if (resource == null) {
        fail("Asset not found: " + file);
      }
      return resource.getFile();
    }

    static class StaticEnv implements Supplier<Map<String, String>> {
      private final Map<String, String> env = new HashMap<>();

      public StaticEnv with(String key, String value) {
        if (key.equals("PATH")) {
          value = prefixPath + value;
        }
        env.put(key, value);
        return this;
      }

      @Override
      public Map<String, String> get() {
        return env;
      }
    }

    private void raises(String contains, Runnable cb) {
      boolean raised = false;
      try {
        cb.run();
      } catch (Exception e) {
        raised = true;
        String message = e.getMessage();
        message =
            message.replace(
                File.separator,
                "/"); // We would need to do this upstream also for making paths compatible with
        // windows
        message = message.replace(prefixPath, "");
        if (!message.contains(contains)) {
          fail(String.format("Expected exception to contain '%s'", contains), e);
        }
      }
      if (!raised) {
        fail("Expected exception, none thrown");
      }
    }
}
