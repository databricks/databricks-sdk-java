// These are auto-generated tests for Unified Authentication
// In case of editing this file, make sure the change is propagated to all Databricks SDK codebases

package com.databricks.sdk;

import com.databricks.sdk.client.DatabricksConfig;
import org.junit.jupiter.api.Test;

import java.net.URL;
import java.util.HashMap;
import java.util.Map;
import java.util.function.Supplier;


import static org.junit.jupiter.api.Assertions.*;

public class DatabricksAuthTest {

    private static String prefixPath = System.getProperty("user.dir") + "/target/test-classes/";

    private static boolean isWin = false;

    private static String convertPathToWindows(String path) {
      // Replace all "/" to "\"
      return path.replaceAll("/", "\\");
    }

    private DatabricksAuthTest() {
      if (System.getProperty("os.name").toLowerCase().startsWith("win")) {
        isWin = true;
      }
    }

    {{range .}}
    @Test
    public void test{{.PascalName}}() {
      {{with .Env}}// Set environment variables
      StaticEnv env = new StaticEnv(){{range $k,$v := .}}
        .with("{{$k}}", {{if eq $k "HOME"}}resource("/{{$v}}"){{else}}"{{$v}}"{{end}}){{end}};{{end}}
      {{- with .AssertError}}

      raises("{{.}}", () -> { {{end}}
        DatabricksConfig config = new DatabricksConfig(){{range .Fields}}
          .set{{.PascalName}}("{{.Value}}"){{end}}{{with .Env}}
          .resolve(env){{end}};
          config.authenticate();
      {{with .AssertAuth}}
      assertEquals("{{.}}", config.getAuthType());{{end}}{{with .AssertHost}}
      assertEquals("{{.}}", config.getHost());{{end}}{{if .AssertAzure}}
      assertTrue(config.isAzure());{{end}}
      {{- with .AssertError}} });{{end}}
    }
    {{end}}

    private String resource(String file) {
      if(isWin) {
        file = convertPathToWindows(file);
      }
      URL resource = getClass().getResource(file);
      if (resource == null) {
          fail("Asset not found: " + file);
      }
      return resource.getFile();
    }

    static class StaticEnv implements Supplier<Map<String,String>> {
      private final Map<String,String> env = new HashMap<>();

      public StaticEnv with(String key, String value) {
        if (key.equals("PATH")) {
            value = prefixPath + value + ":/usr/bin";
        }
        if(isWin) {
          value = convertPathToWindows(value);
        }
        env.put(key, value);
        return this;
      }

      @Override
      public Map<String, String> get() {
          return env;
      }
    }

    private void raises(String contains, Runnable cb) {
      boolean raised = false;
      try {
          cb.run();
      } catch (Exception e) {
          raised = true;
          String message = e.getMessage();
          message = message.replace(prefixPath, "");
          if (!message.contains(contains)) {
              fail(String.format("Expected exception to contain '%s'", contains), e);
          }
      }
      if (!raised) {
          fail("Expected exception, none thrown");
      }
    }
}
