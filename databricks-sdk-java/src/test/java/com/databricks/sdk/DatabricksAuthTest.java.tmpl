// These are auto-generated tests for Unified Authentication
// In case of editing this file, make sure the change is propagated to all Databricks SDK codebases

package com.databricks.sdk;

import static org.junit.jupiter.api.Assertions.*;

import com.databricks.sdk.client.DatabricksConfig;
import java.io.IOException;
import java.io.InputStream;
import java.net.URL;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.function.Supplier;
import org.apache.commons.io.IOUtils;
import org.junit.jupiter.api.Test;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;


import static org.junit.jupiter.api.Assertions.*;

public class DatabricksAuthTest {

    private static final Logger LOG = LoggerFactory.getLogger(DatabricksAuthTest.class);

    private static String prefixPath = System.getProperty("user.dir") + "/target/test-classes/";

    private static boolean isWin = false;

    private static boolean runningOnGithub = false;

    private static String convertPathToLinuxAndMac(String path) {
      path.replace("\\", "/");
      path.replace(";", ":");
      return path;
    }

    private static String convertPathToWindows(String path) {
      path.replace("/", "\\");
      path.replace(":", ";");
      return path;
    }

    public DatabricksAuthTest() {
      if (System.getProperty("os.name").toLowerCase().startsWith("win")) {
        isWin = true;
        prefixPath = convertPathToWindows(prefixPath);
      }
      if (System.getenv("GITHUB_ACTIONS") != null) {
        runningOnGithub = true;
        setPermissionOnTestAz();
      }
    }

    {{range .}}
    @Test
    public void test{{.PascalName}}() {
      {{with .Env}}// Set environment variables
      StaticEnv env = new StaticEnv(){{range $k,$v := .}}
        .with("{{$k}}", {{if eq $k "HOME"}}resource("/{{$v}}"){{else}}"{{$v}}"{{end}}){{end}};{{end}}
      {{- with .AssertError}}

      raises("{{.}}", () -> { {{end}}
        DatabricksConfig config = new DatabricksConfig(){{range .Fields}}
          .set{{.PascalName}}("{{.Value}}"){{end}}{{with .Env}}
          .resolve(env){{end}};
          config.authenticate();
      {{with .AssertAuth}}
      assertEquals("{{.}}", config.getAuthType());{{end}}{{with .AssertHost}}
      assertEquals("{{.}}", config.getHost());{{end}}{{if .AssertAzure}}
      assertTrue(config.isAzure());{{end}}
      {{- with .AssertError}} });{{end}}
    }
    {{end}}

    private String getProcessStream(InputStream stream) throws IOException {
      byte[] bytes = IOUtils.toByteArray(stream);
      return new String(bytes);
    }

    // We need this because in Github Actions, we don't get executable permission on generated az test script.
    private void setPermissionOnTestAz() {
      try {
        List<String> cmd;
        if (System.getProperty("os.name").toLowerCase().startsWith("win")) {
          cmd =
              Arrays.asList(
                  "cmd.exe",
                  "/c",
                  "icacls D:\\a\\databricks-sdk-jvm\\databricks-sdk-jvm\\databricks-sdk-java\\target\\test-classes\\testdata\\az /grant \"%USERNAME%\":(RX)");
        } else if (System.getProperty("os.name").toLowerCase().startsWith("mac")) {
          cmd =
              Arrays.asList(
                  "/bin/bash",
                  "-c",
                  "chmod a+x /Users/runner/work/databricks-sdk-jvm/databricks-sdk-jvm/databricks-sdk-java/target/test-classes/testdata/az");
        } else {
          cmd =
              Arrays.asList(
                  "/bin/bash",
                  "-c",
                  "chmod a+x /home/runner/work/databricks-sdk-jvm/databricks-sdk-jvm/databricks-sdk-java/target/test-classes/testdata/az");
        }
        ProcessBuilder processBuilder = new ProcessBuilder(cmd);
        Process process = processBuilder.start();
        String stdout = getProcessStream(process.getInputStream());
        String stderr = getProcessStream(process.getErrorStream());
        int exitCode = process.waitFor();
        LOG.info("Stdout: " + stdout);
        LOG.info("Stderr: " + stderr);
        LOG.info("Exit Code: " + exitCode);
      } catch (IOException | InterruptedException e) {
        LOG.info(
            String.format(
                "Failed to set executable permission for test az script: %s", e.getMessage()));
      }
    }

    private String resource(String file) {
      if(isWin) {
        file = convertPathToWindows(file);
      }
      URL resource = getClass().getResource(file);
      if (resource == null) {
          fail("Asset not found: " + file);
      }
      return resource.getFile();
    }

    static class StaticEnv implements Supplier<Map<String, String>> {
      private final Map<String, String> env = new HashMap<>();

      public StaticEnv with(String key, String value) {
        if (key.equals("PATH")) {
          value = prefixPath + value;
          if (isWin) {
            value = "C:\\Windows\\System32" + ";" + value;
          }
        }
        if (isWin) {
          value = convertPathToWindows(value);
        }
        env.put(key, value);
        return this;
      }

      @Override
      public Map<String, String> get() {
        return env;
      }
    }

    private void raises(String contains, Runnable cb) {
      boolean raised = false;
      try {
        cb.run();
      } catch (Exception e) {
        raised = true;
        String message = e.getMessage();
        String pathToReplace = prefixPath;
        if (isWin) {
          pathToReplace = "/" + convertPathToLinuxAndMac(pathToReplace);
        }
        message = message.replace(pathToReplace, "");
        if (!message.contains(contains)) {
          fail(String.format("Expected exception to contain '%s'", contains), e);
        }
      }
      if (!raised) {
        fail("Expected exception, none thrown");
      }
    }
}
